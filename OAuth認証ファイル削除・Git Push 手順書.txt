OAuth認証ファイル削除・Git Push 手順書

  🎯 目的

  GitHubのシークレットスキャニングを回避してセキュアにgit pushを実行する

  ⚠️ 重要な前提

  - config/youtube_credentials.jsonは削除しない（APIキー情報）
  - config/youtube_token.jsonのみ削除（自動再生成可能）

  📋 実行手順

  Step 1: 作業ディレクトリ移動

  cd /mnt/d/setsuna_bot

  Step 2: 現在の状況確認

  git status
  ls config/

  Step 3: トークンファイルのみ削除

  rm -f config/youtube_token.json

  Step 4: .gitignoreに除外設定追加

  echo "" >> .gitignore
  echo "# YouTube OAuth トークン（セキュリティ除外）" >> .gitignore
  echo "config/youtube_token.json" >> .gitignore
  echo "youtube_token.json" >> .gitignore

  Step 5: 削除確認

  ls config/
  # 結果: youtube_credentials.json のみ残っていることを確認

  Step 6: 変更をステージング

  git add .
  git add -u

  Step 7: コミット実行

  git commit -m "OAuthトークンファイル削除・セキュリティ対応

  - YouTube OAuthトークンをセキュリティ上削除
  - .gitignoreに永続的な除外設定追加
  - GitHubセキュリティポリシー準拠
  - credentials.jsonは保持（ローカル使用）

  🤖 Generated with [Claude Code](https://claude.ai/code)

  Co-Authored-By: Claude <noreply@anthropic.com>"

  Step 8: Git Push実行

  git push origin main

  Step 9: 成功確認

  git status
  git log --oneline -3

  🔄 次回セッション時の認証復旧手順

  自動復旧方法

  cd D:\setsuna_bot\youtube_knowledge_system
  python generate_existing_playlist_jsons.py

  実行されること:
  1. youtube_token.jsonが存在しないことを検出
  2. ブラウザが開いてGoogleアカウントでログイン
  3. 新しいyoutube_token.jsonを自動生成
  4. 通常通りシステム動作

  手動復旧確認

  python -c "
  from collectors.multi_playlist_collector import MultiPlaylistCollector
  collector = MultiPlaylistCollector()
  if collector._initialize_service():
      print('✅ 認証復旧完了')
  else:
      print('❌ 認証失敗')
  "

  ✅ 期待される結果

  Push成功時

  - GitHubセキュリティ警告なし
  - リモートリポジトリに正常反映
  - OAuth認証情報の漏洩なし

  次回セッション時

  - 5分程度で認証復旧
  - 全機能正常動作
  - セキュリティ問題なし

  🚨 トラブルシューティング

  Push失敗時

  # 強制プッシュ（最終手段）
  git push origin main --force

  認証復旧失敗時

  # Google Cloud Consoleから新しいcredentials.jsonをダウンロード
  # D:\setsuna_bot\config\に配置

  📞 完了確認事項

  - config/youtube_token.jsonが削除されている
  - config/youtube_credentials.jsonが残っている
  - .gitignoreにトークンファイル除外設定がある
  - git push origin mainが成功している
  - GitHubリポジトリに変更が反映されている

  この手順でセキュアなGit Push完了です！